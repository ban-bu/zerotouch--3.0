# Railway专用Dockerfile - 针对Railway平台优化的轻量版本
# 多阶段构建，确保最小镜像体积

# 构建阶段
FROM node:18-alpine AS builder

# 设置工作目录
WORKDIR /app

# 安装构建依赖
RUN apk add --no-cache libc6-compat

# 复制依赖文件
COPY package*.json ./

# 清理npm缓存并安装依赖
RUN npm ci --silent

# 复制源代码
COPY . .

# 设置构建时环境变量（从Railway传入）
ARG VITE_MODELSCOPE_API_URL
ARG VITE_MODELSCOPE_API_KEY
ARG VITE_DEEPBRICKS_API_URL
ARG VITE_DEEPBRICKS_MODEL
ARG VITE_DEEPBRICKS_API_KEY
ARG VITE_APP_TITLE
ARG VITE_APP_VERSION
ARG VITE_ENABLE_DEBUG
ARG VITE_ENABLE_SOUND
ARG VITE_ENABLE_AUTO_SCROLL

# 将ARG转换为ENV以供构建脚本使用
ENV VITE_MODELSCOPE_API_URL=$VITE_MODELSCOPE_API_URL
ENV VITE_MODELSCOPE_API_KEY=$VITE_MODELSCOPE_API_KEY
ENV VITE_DEEPBRICKS_API_URL=$VITE_DEEPBRICKS_API_URL
ENV VITE_DEEPBRICKS_MODEL=$VITE_DEEPBRICKS_MODEL
ENV VITE_DEEPBRICKS_API_KEY=$VITE_DEEPBRICKS_API_KEY
ENV VITE_APP_TITLE=$VITE_APP_TITLE
ENV VITE_APP_VERSION=$VITE_APP_VERSION
ENV VITE_ENABLE_DEBUG=$VITE_ENABLE_DEBUG
ENV VITE_ENABLE_SOUND=$VITE_ENABLE_SOUND
ENV VITE_ENABLE_AUTO_SCROLL=$VITE_ENABLE_AUTO_SCROLL

# 构建应用（包括React版本和HTML版本）
RUN npm run build

# 生产运行阶段
FROM nginx:alpine AS production

# 安装必要的工具（Railway健康检查需要）
RUN apk add --no-cache curl

# 创建自定义nginx配置（适配Railway环境，支持双版本）
RUN echo 'server {' > /etc/nginx/conf.d/default.conf && \
    echo '    listen 8080;' >> /etc/nginx/conf.d/default.conf && \
    echo '    server_name _;' >> /etc/nginx/conf.d/default.conf && \
    echo '    root /usr/share/nginx/html;' >> /etc/nginx/conf.d/default.conf && \
    echo '    index index.html app.html;' >> /etc/nginx/conf.d/default.conf && \
    echo '' >> /etc/nginx/conf.d/default.conf && \
    echo '    # HTML版本（独立版本）' >> /etc/nginx/conf.d/default.conf && \
    echo '    location = /app.html {' >> /etc/nginx/conf.d/default.conf && \
    echo '        try_files /app.html =404;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '' >> /etc/nginx/conf.d/default.conf && \
    echo '    # React版本（SPA路由支持）' >> /etc/nginx/conf.d/default.conf && \
    echo '    location / {' >> /etc/nginx/conf.d/default.conf && \
    echo '        try_files $uri $uri/ /index.html;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '' >> /etc/nginx/conf.d/default.conf && \
    echo '    # API代理（可选）' >> /etc/nginx/conf.d/default.conf && \
    echo '    # location /api/ {' >> /etc/nginx/conf.d/default.conf && \
    echo '    #     proxy_pass https://api-inference.modelscope.cn/;' >> /etc/nginx/conf.d/default.conf && \
    echo '    #     proxy_set_header Host $host;' >> /etc/nginx/conf.d/default.conf && \
    echo '    #     proxy_set_header X-Real-IP $remote_addr;' >> /etc/nginx/conf.d/default.conf && \
    echo '    # }' >> /etc/nginx/conf.d/default.conf && \
    echo '' >> /etc/nginx/conf.d/default.conf && \
    echo '    # 静态资源缓存优化' >> /etc/nginx/conf.d/default.conf && \
    echo '    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {' >> /etc/nginx/conf.d/default.conf && \
    echo '        expires 1y;' >> /etc/nginx/conf.d/default.conf && \
    echo '        add_header Cache-Control "public, immutable";' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '' >> /etc/nginx/conf.d/default.conf && \
    echo '    # 安全头部' >> /etc/nginx/conf.d/default.conf && \
    echo '    add_header X-Frame-Options "SAMEORIGIN" always;' >> /etc/nginx/conf.d/default.conf && \
    echo '    add_header X-Content-Type-Options "nosniff" always;' >> /etc/nginx/conf.d/default.conf && \
    echo '    add_header Referrer-Policy "no-referrer-when-downgrade" always;' >> /etc/nginx/conf.d/default.conf && \
    echo '' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Gzip压缩' >> /etc/nginx/conf.d/default.conf && \
    echo '    gzip on;' >> /etc/nginx/conf.d/default.conf && \
    echo '    gzip_vary on;' >> /etc/nginx/conf.d/default.conf && \
    echo '    gzip_min_length 1024;' >> /etc/nginx/conf.d/default.conf && \
    echo '    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/wasm;' >> /etc/nginx/conf.d/default.conf && \
    echo '}' >> /etc/nginx/conf.d/default.conf

# 从构建阶段复制构建产物
COPY --from=builder /app/dist /usr/share/nginx/html

# 设置正确的权限
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# 创建pid文件目录并设置权限
RUN mkdir -p /var/run/nginx && \
    chown -R nginx:nginx /var/run/nginx

# 修改nginx配置以使用端口8080（Railway要求）
RUN sed -i 's/80/8080/g' /etc/nginx/nginx.conf

# 暴露Railway要求的端口
EXPOSE 8080

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/ || exit 1

# 启动命令
CMD ["nginx", "-g", "daemon off;"]
